library(zoo)
library(ROI)
getSymbols(c("ENGI11.SA", "ALPA4.SA", "ABEV3.SA", "TOTS3.SA", "LREN3.SA"), src = "yahoo", from ='2018-09-30', to='2022-12-31' )
stock_prices <- cbind(ABEV3.SA$ABEV3.SA.Adjusted, ALPA4.SA$ALPA4.SA.Adjusted, ENGI11.SA$ENGI11.SA.Adjusted,LREN3.SA$LREN3.SA.Adjusted,TOTS3.SA$TOTS3.SA.Adjusted)
stock_prices |> dim()
stock_prices |> head()
stock_returns <- stock_prices |>
PerformanceAnalytics::Return.calculate(method = 'log') |>
na.omit()
colnames(stock_returns) <- c("ABEV3", "ALPA4","ENGI11" ,"LREN3","TOTS3" )
#exporting data
stock_prices |>
as.data.frame() |>
openxlsx::write.xlsx("stock_prices.xlsx",rowNames = TRUE)
stock_returns |>
as.data.frame() |>
openxlsx::write.xlsx("stock_returns.xlsx",rowNames = TRUE)
#Computing the p-value of correlations
cor.mtest <- function(mat, ...) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat<- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], ...)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
# matrix of the p-value of the correlation
p.mat.stocks <- stock_returns |> cor.mtest()
cor_stock_returns <- stock_returns |> cor()
# Matrix de correlacao (insignificantes sao desrotulados)
corrplot(cor_stock_returns, method="color", col=col(200),
type="upper", order="hclust",
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45, #Text label color and rotation
# Combine with significance
p.mat = p.mat.stocks, sig.level = 0.01, insig = "blank",
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
corrplot(cor_stock_returns,type = 'upper',diag = FALSE, addCoef.col = "black")
library(PerformanceAnalytics)
library(riskParityPortfolio)
library(ROI.plugin.quadprog)
library(PortfolioAnalytics)
library(RiskPortfolios)
library(fPortfolio)
library(tidyverse)
library(openxlsx)
library(corrplot)
library(quantmod)
library(ggplot2)
library(GGally)
library(dplyr)
library(purrr)
library(rlist)
library(xts)
library(zoo)
library(ROI)
getSymbols(c("ENGI11.SA", "ALPA4.SA", "ABEV3.SA", "TOTS3.SA", "LREN3.SA"), src = "yahoo", from ='2018-09-30', to='2022-12-31' )
stock_prices <- cbind(ABEV3.SA$ABEV3.SA.Adjusted, ALPA4.SA$ALPA4.SA.Adjusted, ENGI11.SA$ENGI11.SA.Adjusted,LREN3.SA$LREN3.SA.Adjusted,TOTS3.SA$TOTS3.SA.Adjusted)
stock_prices |> dim()
stock_prices |> head()
stock_returns <- stock_prices |>
PerformanceAnalytics::Return.calculate(method = 'log') |>
na.omit()
colnames(stock_returns) <- c("ABEV3", "ALPA4","ENGI11" ,"LREN3","TOTS3" )
#exporting data
stock_prices |>
as.data.frame() |>
openxlsx::write.xlsx("stock_prices.xlsx",rowNames = TRUE)
stock_returns |>
as.data.frame() |>
openxlsx::write.xlsx("stock_returns.xlsx",rowNames = TRUE)
corrplot(cor_stock_returns,type = 'upper',diag = FALSE, addCoef.col = "black")
cum_rets <- (1 + stock_returns) |> cumprod() - 1
cum_rets |>
fortify.zoo() |>
as.tibble() |> dplyr::rename("Date" = Index ) |>
gather(key = "stock", value = "CumulativeReturn", -Date) |>
ggplot(aes(x=Date,y=CumulativeReturn)) +
geom_line(aes(color=stock)) +
labs(x="Date",y='Cummulative Returns',title = "Stocks Performance")+
theme_classic()
REBAL_PERIOD <- "quarters"
LOOKBACK_PERIOD <- 252 # 12 months
## Specifications
portfolio_specs <-
portfolio.spec(colnames(stock_returns)) |>
add.constraint(type = "box",min=0.01, max=0.99) |>
add.constraint(type = "full_investment") |>
add.objective(type = "risk", name = "StdDev") |> #minimize risk
add.objective(type = "return", name = "mean") # maximize return
optm <- 'DEoptim'
optm_maxSharp <- optimize.portfolio.rebalancing(R = stock_returns,
portfolio = portfolio_specs,
maxSR=TRUE,
optimize_method = optm,
rebalance_on = REBAL_PERIOD,
lookback_period = LOOKBACK_PERIOD,
rolling_window = LOOKBACK_PERIOD)
returns_portfolio_maxSR <-  Return.portfolio(stock_returns, weights = extractWeights(optm_maxSharp))
returns_portfolio_maxSR <-returns_portfolio_maxSR['2020/'] #filtrando amostra
charts.PerformanceSummary(returns_portfolio_maxSR ,main = "Markowitz Max SharpeRatio")
ewma_sigma <- function(R,portfolio){
out <- list()
out$sigma <- RiskPortfolios::covEstimation(R, control = list(type = 'ewma', lambda = 0.9))
return(out)
}
optm_maxSharp_ewma <- optimize.portfolio.rebalancing(R = stock_returns,
portfolio = portfolio_specs,
maxSR=TRUE,
optimize_method = optm,
rebalance_on = REBAL_PERIOD,
lookback_period = LOOKBACK_PERIOD,
rolling_window = LOOKBACK_PERIOD,
sigma = ewma_sigma)
returns_portfolio_maxSR_ewma<-  Return.portfolio(stock_returns, weights = extractWeights(optm_maxSharp_ewma))
returns_portfolio_maxSR_ewma <-returns_portfolio_maxSR_ewma['2020/']
charts.PerformanceSummary(returns_portfolio_maxSR_ewma,main = "Markowitz Max SharpeRatio with EWMA")
# Risk Parity - source : https://bookdown.org/souzatharsis/open-quant-live-book/risk-parity-portfolios.html
rWindows<-rollingWindows(stock_returns, period="12m",
by="3m")
# Apply FUN to time-series R in the subset [from, to].
ApplyFilter <- function(from, to, R, FUN){
filter_series <- FUN(R[paste0(from, "/", to)])
return(filter_series)
}
# For each pair (from, to) ApplyFilter to time-series R using FUN
ApplyRolling <- function(from, to, R, FUN){
roll <- purrr::map2(from, to, ApplyFilter, R=R, FUN=FUN)
return(roll)
}
# Returns weights of a risk parity portfolio from covariance matrix of matrix of returns r
CalculateRiskParity <- function(r){
rp <- riskParityPortfolio::riskParityPortfolio(cov(r))$w
return(rp)
}
# Given a matrix of returns `r`,
# calculates risk parity weights for each date in `to` considering a time window from `from` and `to`
RollingRiskParity <- function(from, to, r){
p<-ApplyRolling(from, to, r, CalculateRiskParity)
names(p)<-to
results <- rlist::list.rbind(p)
return(results)
}
parity.weights<-RollingRiskParity(rWindows$from@Data, rWindows$to@Data, stock_returns)
parity.returns <- Return.portfolio(stock_returns, weights=parity.weights)
parity.returns <- parity.returns['2020/']
charts.PerformanceSummary(parity.returns,main = "Risk Parity Portfolios")
p.returns <- merge(returns_portfolio_maxSR, returns_portfolio_maxSR_ewma, parity.returns, all = TRUE)
names(p.returns) <- c("Markowitz_maxSR","Markowitz_maxSR_EWMA","RiskParityPortfolio")
PerformanceAnalytics::charts.PerformanceSummary(p.returns, colorset=rich6equal,
lwd=2, cex.legend = 1.0, event.labels = TRUE, main = "")
PerformanceAnalytics::charts.RollingPerformance(p.returns, colorset=rich6equal,
lwd=2, cex.legend = 1.0, event.labels = TRUE, main = "")
cum_rets_portfolios <- (1+ p.returns['2020/']) |> cumprod() -1
cum_rets_portfolios |>
fortify.zoo() |>
as.tibble() |> dplyr::rename("Date" = Index ) |>
gather(key = "Portfolio", value = "CumulativeReturn", -Date) |>
ggplot(aes(x=Date,y=CumulativeReturn)) +
geom_line(aes(color=Portfolio),alpha=0.65) +
labs(x="Date",y='Cummulative Returns',title = "Portfolios Performance")+
theme_classic()
p.returns |>
PerformanceAnalytics::table.AnnualizedReturns() |>
t() |>
as.data.frame()
returns_portfolio_maxSR |>
PerformanceAnalytics::table.CalendarReturns() |>
as.data.frame()
returns_portfolio_maxSR_ewma |>
PerformanceAnalytics::table.CalendarReturns() |>
as.data.frame()
parity.returns |>
PerformanceAnalytics::table.CalendarReturns() |>
as.data.frame()
chart.Weights(optm_maxSharp,main = "Markowitz Max SharpeRatio")
chart.Weights(optm_maxSharp_ewma,main = "Markowitz Max SharpeRatio with EWMA")
PerformanceAnalytics::chart.StackedBar(parity.weights,
xlab = "Rebalance Dates",
ylab = "Weight",
main = "Risk Parity")
#retornos muito correlacionados
PerformanceAnalytics::chart.Correlation(p.returns)
extractWeights(optm_maxSharp_ewma)
extractWeights(optm_maxSharp)
extractWeights(optm_maxSharp_ewma) |> names()
extractWeights(optm_maxSharp_ewma) |> rownames()
extractWeights(optm_maxSharp_ewma) |> rindex()
extractWeights(optm_maxSharp_ewma) |> index()
table.AnnualizedReturns(extractWeights(optm_maxSharp_ewma))
table.AnnualizedReturns(extractWeights(optm_maxSharp_ewma),geometric = TRUE)$Contribution
table.AnnualizedReturns(extractWeights(optm_maxSharp_ewma),geometric = TRUE)
extractWeights(optm_maxSharp_ewma) |> index() |>combn( 2)
extractWeights(optm_maxSharp_ewma) |> index() |> combn( 2) |> t()
extractWeights(optm_maxSharp_ewma) |> index() |> as.character()|> combn( 2) |> t()
extractWeights(optm_maxSharp_ewma) |> index() |> as.character()|> embed(2)
dt_points <- dt_points[,2:1]
dt_points <-extractWeights(optm_maxSharp_ewma) |> index() |> as.character()|> embed(2)
dt_points <- dt_points[,2:1]
dt_points
dt_points <-extractWeights(optm_maxSharp_ewma) |> index() |> as.character()|> embed(2)
dt_points <- dt_points[,2:1]
for (i in 1:nrow(dt_points)){
print(dt_points[i,])
}
dt_points <-extractWeights(optm_maxSharp_ewma) |> index() |> as.character()|> embed(2)
dt_points <- dt_points[,2:1]
for (i in 1:nrow(dt_points)){
print(dt_points[i,1])
print(dt_points[i,2])
}
dt_points <-extractWeights(optm_maxSharp_ewma) |> index() |> as.character()|> embed(2)
dt_points <- dt_points[,2:1]
for (i in 1:nrow(dt_points)){
string_period <- paste(dt_points[i,1],dt_points[i,2],sep="/")
print(string_period)
#period_filtered <- stock_returns[]
}
dt_points <-extractWeights(optm_maxSharp_ewma) |> index() |> as.character()|> embed(2)
dt_points <- dt_points[,2:1]
for (i in 1:nrow(dt_points)){
string_period <- paste(dt_points[i,1],dt_points[i,2],sep="/")
print(string_period)
stock_returns[string_period]
}
dt_points <-extractWeights(optm_maxSharp_ewma) |> index() |> as.character()|> embed(2)
dt_points <- dt_points[,2:1]
for (i in 1:nrow(dt_points)){
string_period <- paste(dt_points[i,1],dt_points[i,2],sep="/")
print(string_period)
print(stock_returns[string_period])
}
dt_points <-extractWeights(optm_maxSharp_ewma) |> index() |> as.character()|> embed(2)
dt_points <- dt_points[,2:1]
for (i in 1:nrow(dt_points)){
string_period <- paste(dt_points[i,1],dt_points[i,2],sep="/")
frame_returns <- stock_returns[string_period]
cov_frame <- frame_returns |> cov()
w <- extractWeights(optm_maxSharp_ewma)[dt_points[i,1]]
print(w)
}
dt_points <-extractWeights(optm_maxSharp_ewma) |> index() |> as.character()|> embed(2)
dt_points <- dt_points[,2:1]
# Calculate the volatility contribution of each asset
volatility_contribution <- function(cov_matrix, weights) {
w_matrix <- matrix(weights, nrow = length(weights), ncol = 1)
total_volatility <- sqrt(t(w_matrix) %*% cov_matrix %*% w_matrix)
asset_volatility <- diag(cov_matrix) %*% w_matrix
contribution <- (cov_matrix %*% w_matrix) * asset_volatility / total_volatility
return(contribution)
}
for (i in 1:nrow(dt_points)){
string_period <- paste(dt_points[i,1],dt_points[i,2],sep="/")
frame_returns <- stock_returns[string_period]
cov_frame <- frame_returns |> cov()
w <- extractWeights(optm_maxSharp_ewma)[dt_points[i,1]]
print(volatility_contribution(cov_frame,w))
}
dt_points <-extractWeights(optm_maxSharp_ewma) |> index() |> as.character()|> embed(2)
dt_points <- dt_points[,2:1]
# Calculate the volatility contribution of each asset
volatility_contribution <- function(cov_matrix, weights) {
w_matrix <- matrix(weights, nrow = length(weights), ncol = 1)
total_volatility <- sqrt(t(w_matrix) %*% cov_matrix %*% w_matrix)
asset_volatility <- diag(cov_matrix) %*% w_matrix
contribution <- (cov_matrix %*% w_matrix) * asset_volatility / total_volatility
return(contribution)
}
for (i in 1:nrow(dt_points)){
string_period <- paste(dt_points[i,1],dt_points[i,2],sep="/")
frame_returns <- stock_returns[string_period]
cov_frame <- frame_returns |> cov()
w <- extractWeights(optm_maxSharp_ewma)[dt_points[i,1]]
print(cov_frame)
print(w)
#print(volatility_contribution(cov_frame,w))
}
dt_points <-extractWeights(optm_maxSharp_ewma) |> index() |> as.character()|> embed(2)
dt_points <- dt_points[,2:1]
# Calculate the volatility contribution of each asset
volatility_contribution <- function(cov_matrix, weights) {
w_matrix <- matrix(weights, nrow = length(weights), ncol = 1)
total_volatility <- sqrt(t(w_matrix) %*% cov_matrix %*% w_matrix)
asset_volatility <- diag(cov_matrix) %*% w_matrix
contribution <- (cov_matrix %*% w_matrix) * asset_volatility / total_volatility
return(contribution)
}
for (i in 1:nrow(dt_points)){
string_period <- paste(dt_points[i,1],dt_points[i,2],sep="/")
frame_returns <- stock_returns[string_period]
cov_frame <- frame_returns |> cov()
w <- extractWeights(optm_maxSharp_ewma)[dt_points[i,1]]
print(cov_frame)
print(w[1,])
#print(volatility_contribution(cov_frame,w))
}
dt_points <-extractWeights(optm_maxSharp_ewma) |> index() |> as.character()|> embed(2)
dt_points <- dt_points[,2:1]
# Calculate the volatility contribution of each asset
volatility_contribution <- function(cov_matrix, weights) {
w_matrix <- matrix(weights, nrow = length(weights), ncol = 1)
total_volatility <- sqrt(t(w_matrix) %*% cov_matrix %*% w_matrix)
asset_volatility <- diag(cov_matrix) %*% w_matrix
contribution <- (cov_matrix %*% w_matrix) * asset_volatility / total_volatility
return(contribution)
}
for (i in 1:nrow(dt_points)){
string_period <- paste(dt_points[i,1],dt_points[i,2],sep="/")
frame_returns <- stock_returns[string_period]
cov_frame <- frame_returns |> cov()
w <- extractWeights(optm_maxSharp_ewma)[dt_points[i,1]]
print(cov_frame)
print(as.vector(w))
#print(volatility_contribution(cov_frame,w))
}
dt_points <-extractWeights(optm_maxSharp_ewma) |> index() |> as.character()|> embed(2)
dt_points <- dt_points[,2:1]
# Calculate the volatility contribution of each asset
volatility_contribution <- function(cov_matrix, weights) {
w_matrix <- matrix(weights, nrow = length(weights), ncol = 1)
total_volatility <- sqrt(t(w_matrix) %*% cov_matrix %*% w_matrix)
asset_volatility <- diag(cov_matrix) %*% w_matrix
contribution <- (cov_matrix %*% w_matrix) * asset_volatility / total_volatility
return(contribution)
}
for (i in 1:nrow(dt_points)){
string_period <- paste(dt_points[i,1],dt_points[i,2],sep="/")
frame_returns <- stock_returns[string_period]
cov_frame <- frame_returns |> cov()
w <- extractWeights(optm_maxSharp_ewma)[dt_points[i,1]]
# print(cov_frame)
# print(as.vector(w))
print(volatility_contribution(cov_frame,as.vector(w)))
}
dt_points <-extractWeights(optm_maxSharp_ewma) |> index() |> as.character()|> embed(2)
dt_points <- dt_points[,2:1]
# Calculate the volatility contribution of each asset
volatility_contribution <- function(cov_matrix, weights) {
#w_matrix <- matrix(weights, nrow = length(weights), ncol = 1)
total_volatility <- sqrt(t(w_matrix) %*% cov_matrix %*% w_matrix)
asset_volatility <- diag(cov_matrix) %*% w_matrix
contribution <- (cov_matrix %*% w_matrix) * asset_volatility / total_volatility
return(contribution)
}
for (i in 1:nrow(dt_points)){
string_period <- paste(dt_points[i,1],dt_points[i,2],sep="/")
frame_returns <- stock_returns[string_period]
cov_frame <- frame_returns |> cov()
w <- extractWeights(optm_maxSharp_ewma)[dt_points[i,1]]
# print(cov_frame)
# print(as.vector(w))
print(volatility_contribution(cov_frame,as.vector(w)))
}
dt_points <-extractWeights(optm_maxSharp_ewma) |> index() |> as.character()|> embed(2)
dt_points <- dt_points[,2:1]
# Calculate the volatility contribution of each asset
volatility_contribution <- function(cov_matrix, weights) {
#w_matrix <- matrix(weights, nrow = length(weights), ncol = 1)
sd_portfolio <- sqrt(t(w) %*% cov_matrix %*% w)
}
for (i in 1:nrow(dt_points)){
string_period <- paste(dt_points[i,1],dt_points[i,2],sep="/")
frame_returns <- stock_returns[string_period]
cov_frame <- frame_returns |> cov()
w <- extractWeights(optm_maxSharp_ewma)[dt_points[i,1]]
# print(cov_frame)
# print(as.vector(w))
print(volatility_contribution(cov_frame,as.vector(w)))
}
dt_points <-extractWeights(optm_maxSharp_ewma) |> index() |> as.character()|> embed(2)
dt_points <- dt_points[,2:1]
# Calculate the volatility contribution of each asset
volatility_contribution <- function(cov_matrix, weights) {
#w_matrix <- matrix(weights, nrow = length(weights), ncol = 1)
sd_portfolio <- sqrt(t(w) %*% cov_matrix %*% w)
}
for (i in 1:nrow(dt_points)){
string_period <- paste(dt_points[i,1],dt_points[i,2],sep="/")
frame_returns <- stock_returns[string_period]
cov_frame <- frame_returns |> cov()
w <- extractWeights(optm_maxSharp_ewma)[dt_points[i,1]]
# print(cov_frame)
# print(as.vector(w))
print(volatility_contribution(coredata(cov_frame),as.vector(w)))
}
dt_points <-extractWeights(optm_maxSharp_ewma) |> index() |> as.character()|> embed(2)
dt_points <- dt_points[,2:1]
# Calculate the volatility contribution of each asset
volatility_contribution <- function(cov_matrix, weights) {
#w_matrix <- matrix(weights, nrow = length(weights), ncol = 1)
sd_portfolio <- sqrt(t(w) %*% cov_matrix %*% w)
}
for (i in 1:nrow(dt_points)){
string_period <- paste(dt_points[i,1],dt_points[i,2],sep="/")
frame_returns <- stock_returns[string_period]
cov_frame <- frame_returns |> cov()
w <- extractWeights(optm_maxSharp_ewma)[dt_points[i,1]] |> as.vector()
# print(cov_frame)
# print(as.vector(w))
sqrt(t(w) %*% cov_matrix %*% w)
}
dt_points <-extractWeights(optm_maxSharp_ewma) |> index() |> as.character()|> embed(2)
dt_points <- dt_points[,2:1]
# Calculate the volatility contribution of each asset
volatility_contribution <- function(cov_matrix, weights) {
#w_matrix <- matrix(weights, nrow = length(weights), ncol = 1)
sd_portfolio <- sqrt(t(w) %*% cov_matrix %*% w)
}
for (i in 1:nrow(dt_points)){
string_period <- paste(dt_points[i,1],dt_points[i,2],sep="/")
frame_returns <- stock_returns[string_period]
cov_frame <- frame_returns |> cov()
w <- extractWeights(optm_maxSharp_ewma)[dt_points[i,1]] |> as.vector()
# print(cov_frame)
# print(as.vector(w))
sqrt(t(w) %*% cov_frame %*% w)
}
dt_points <-extractWeights(optm_maxSharp_ewma) |> index() |> as.character()|> embed(2)
dt_points <- dt_points[,2:1]
# Calculate the volatility contribution of each asset
volatility_contribution <- function(cov_matrix, weights) {
#w_matrix <- matrix(weights, nrow = length(weights), ncol = 1)
sd_portfolio <- sqrt(t(w) %*% cov_matrix %*% w)
}
for (i in 1:nrow(dt_points)){
string_period <- paste(dt_points[i,1],dt_points[i,2],sep="/")
frame_returns <- stock_returns[string_period]
cov_frame <- frame_returns |> cov()
w <- extractWeights(optm_maxSharp_ewma)[dt_points[i,1]] |> as.vector()
# print(cov_frame)
# print(as.vector(w))
sd_portfolio <- sqrt(t(w) %*% cov_frame %*% w)
marginal_contribution <- w %*% cov_frame / sd_portfolio[1, 1]
component_contribution <- marginal_contribution * w
components_summed <- rowSums(component_contribution)
component_percentages <- component_contribution / sd_portfolio[1, 1]
percentage_tibble_by_hand <- tibble(symbols, w, as.vector(component_percentages)) %>% rename(asset = symbols, 'portfolio weight' = w, 'risk contribution' =`as.vector(component_percentages)`)
percentage_tibble_by_hand
}
dt_points <-extractWeights(optm_maxSharp_ewma) |> index() |> as.character()|> embed(2)
dt_points <- dt_points[,2:1]
# Calculate the volatility contribution of each asset
volatility_contribution <- function(cov_matrix, weights) {
#w_matrix <- matrix(weights, nrow = length(weights), ncol = 1)
sd_portfolio <- sqrt(t(w) %*% cov_matrix %*% w)
}
for (i in 1:nrow(dt_points)){
string_period <- paste(dt_points[i,1],dt_points[i,2],sep="/")
frame_returns <- stock_returns[string_period]
cov_frame <- frame_returns |> cov()
w <- extractWeights(optm_maxSharp_ewma)[dt_points[i,1]] |> as.vector()
# print(cov_frame)
# print(as.vector(w))
sd_portfolio <- sqrt(t(w) %*% cov_frame %*% w)
marginal_contribution <- w %*% cov_frame / sd_portfolio[1, 1]
component_contribution <- marginal_contribution * w
components_summed <- rowSums(component_contribution)
component_percentages <- component_contribution / sd_portfolio[1, 1]
percentage_tibble_by_hand <- tibble(symbols, w, as.vector(component_percentages))
}
dt_points <-extractWeights(optm_maxSharp_ewma) |> index() |> as.character()|> embed(2)
dt_points <- dt_points[,2:1]
# Calculate the volatility contribution of each asset
volatility_contribution <- function(cov_matrix, weights) {
#w_matrix <- matrix(weights, nrow = length(weights), ncol = 1)
sd_portfolio <- sqrt(t(w) %*% cov_matrix %*% w)
}
for (i in 1:nrow(dt_points)){
string_period <- paste(dt_points[i,1],dt_points[i,2],sep="/")
frame_returns <- stock_returns[string_period]
cov_frame <- frame_returns |> cov()
w <- extractWeights(optm_maxSharp_ewma)[dt_points[i,1]] |> as.vector()
# print(cov_frame)
# print(as.vector(w))
sd_portfolio <- sqrt(t(w) %*% cov_frame %*% w)
marginal_contribution <- w %*% cov_frame / sd_portfolio[1, 1]
component_contribution <- marginal_contribution * w
components_summed <- rowSums(component_contribution)
component_percentages <- component_contribution / sd_portfolio[1, 1]
percentage_tibble_by_hand <- tibble(colnames(cov_frame), w, as.vector(component_percentages))
}
dt_points <-extractWeights(optm_maxSharp_ewma) |> index() |> as.character()|> embed(2)
dt_points <- dt_points[,2:1]
# Calculate the volatility contribution of each asset
volatility_contribution <- function(cov_matrix, weights) {
#w_matrix <- matrix(weights, nrow = length(weights), ncol = 1)
sd_portfolio <- sqrt(t(w) %*% cov_matrix %*% w)
}
for (i in 1:nrow(dt_points)){
string_period <- paste(dt_points[i,1],dt_points[i,2],sep="/")
frame_returns <- stock_returns[string_period]
cov_frame <- frame_returns |> cov()
w <- extractWeights(optm_maxSharp_ewma)[dt_points[i,1]] |> as.vector()
# print(cov_frame)
# print(as.vector(w))
sd_portfolio <- sqrt(t(w) %*% cov_frame %*% w)
marginal_contribution <- w %*% cov_frame / sd_portfolio[1, 1]
component_contribution <- marginal_contribution * w
components_summed <- rowSums(component_contribution)
component_percentages <- component_contribution / sd_portfolio[1, 1]
percentage_tibble_by_hand <- tibble(colnames(cov_frame), w, as.vector(component_percentages))
print(percentage_tibble_by_hand)
}
setwd("~/Documents/Faculdade/EAD0759 - Tecnicas de Aprendizado de Máquina Aplicadas a Negocios/Lab 2")
