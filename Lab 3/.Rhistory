volatility_contribution <- function(cov_matrix, weights) {
w_matrix <- matrix(weights, nrow = length(weights), ncol = 1)
total_volatility <- sqrt(t(w_matrix) %*% cov_matrix %*% w_matrix)
asset_volatility <- diag(cov_matrix) %*% w_matrix
contribution <- (cov_matrix %*% w_matrix) * asset_volatility / total_volatility
return(contribution)
}
for (i in 1:nrow(dt_points)){
string_period <- paste(dt_points[i,1],dt_points[i,2],sep="/")
frame_returns <- stock_returns[string_period]
cov_frame <- frame_returns |> cov()
w <- extractWeights(optm_maxSharp_ewma)[dt_points[i,1]]
print(cov_frame)
print(as.vector(w))
#print(volatility_contribution(cov_frame,w))
}
dt_points <-extractWeights(optm_maxSharp_ewma) |> index() |> as.character()|> embed(2)
dt_points <- dt_points[,2:1]
# Calculate the volatility contribution of each asset
volatility_contribution <- function(cov_matrix, weights) {
w_matrix <- matrix(weights, nrow = length(weights), ncol = 1)
total_volatility <- sqrt(t(w_matrix) %*% cov_matrix %*% w_matrix)
asset_volatility <- diag(cov_matrix) %*% w_matrix
contribution <- (cov_matrix %*% w_matrix) * asset_volatility / total_volatility
return(contribution)
}
for (i in 1:nrow(dt_points)){
string_period <- paste(dt_points[i,1],dt_points[i,2],sep="/")
frame_returns <- stock_returns[string_period]
cov_frame <- frame_returns |> cov()
w <- extractWeights(optm_maxSharp_ewma)[dt_points[i,1]]
# print(cov_frame)
# print(as.vector(w))
print(volatility_contribution(cov_frame,as.vector(w)))
}
dt_points <-extractWeights(optm_maxSharp_ewma) |> index() |> as.character()|> embed(2)
dt_points <- dt_points[,2:1]
# Calculate the volatility contribution of each asset
volatility_contribution <- function(cov_matrix, weights) {
#w_matrix <- matrix(weights, nrow = length(weights), ncol = 1)
total_volatility <- sqrt(t(w_matrix) %*% cov_matrix %*% w_matrix)
asset_volatility <- diag(cov_matrix) %*% w_matrix
contribution <- (cov_matrix %*% w_matrix) * asset_volatility / total_volatility
return(contribution)
}
for (i in 1:nrow(dt_points)){
string_period <- paste(dt_points[i,1],dt_points[i,2],sep="/")
frame_returns <- stock_returns[string_period]
cov_frame <- frame_returns |> cov()
w <- extractWeights(optm_maxSharp_ewma)[dt_points[i,1]]
# print(cov_frame)
# print(as.vector(w))
print(volatility_contribution(cov_frame,as.vector(w)))
}
dt_points <-extractWeights(optm_maxSharp_ewma) |> index() |> as.character()|> embed(2)
dt_points <- dt_points[,2:1]
# Calculate the volatility contribution of each asset
volatility_contribution <- function(cov_matrix, weights) {
#w_matrix <- matrix(weights, nrow = length(weights), ncol = 1)
sd_portfolio <- sqrt(t(w) %*% cov_matrix %*% w)
}
for (i in 1:nrow(dt_points)){
string_period <- paste(dt_points[i,1],dt_points[i,2],sep="/")
frame_returns <- stock_returns[string_period]
cov_frame <- frame_returns |> cov()
w <- extractWeights(optm_maxSharp_ewma)[dt_points[i,1]]
# print(cov_frame)
# print(as.vector(w))
print(volatility_contribution(cov_frame,as.vector(w)))
}
dt_points <-extractWeights(optm_maxSharp_ewma) |> index() |> as.character()|> embed(2)
dt_points <- dt_points[,2:1]
# Calculate the volatility contribution of each asset
volatility_contribution <- function(cov_matrix, weights) {
#w_matrix <- matrix(weights, nrow = length(weights), ncol = 1)
sd_portfolio <- sqrt(t(w) %*% cov_matrix %*% w)
}
for (i in 1:nrow(dt_points)){
string_period <- paste(dt_points[i,1],dt_points[i,2],sep="/")
frame_returns <- stock_returns[string_period]
cov_frame <- frame_returns |> cov()
w <- extractWeights(optm_maxSharp_ewma)[dt_points[i,1]]
# print(cov_frame)
# print(as.vector(w))
print(volatility_contribution(coredata(cov_frame),as.vector(w)))
}
dt_points <-extractWeights(optm_maxSharp_ewma) |> index() |> as.character()|> embed(2)
dt_points <- dt_points[,2:1]
# Calculate the volatility contribution of each asset
volatility_contribution <- function(cov_matrix, weights) {
#w_matrix <- matrix(weights, nrow = length(weights), ncol = 1)
sd_portfolio <- sqrt(t(w) %*% cov_matrix %*% w)
}
for (i in 1:nrow(dt_points)){
string_period <- paste(dt_points[i,1],dt_points[i,2],sep="/")
frame_returns <- stock_returns[string_period]
cov_frame <- frame_returns |> cov()
w <- extractWeights(optm_maxSharp_ewma)[dt_points[i,1]] |> as.vector()
# print(cov_frame)
# print(as.vector(w))
sqrt(t(w) %*% cov_matrix %*% w)
}
dt_points <-extractWeights(optm_maxSharp_ewma) |> index() |> as.character()|> embed(2)
dt_points <- dt_points[,2:1]
# Calculate the volatility contribution of each asset
volatility_contribution <- function(cov_matrix, weights) {
#w_matrix <- matrix(weights, nrow = length(weights), ncol = 1)
sd_portfolio <- sqrt(t(w) %*% cov_matrix %*% w)
}
for (i in 1:nrow(dt_points)){
string_period <- paste(dt_points[i,1],dt_points[i,2],sep="/")
frame_returns <- stock_returns[string_period]
cov_frame <- frame_returns |> cov()
w <- extractWeights(optm_maxSharp_ewma)[dt_points[i,1]] |> as.vector()
# print(cov_frame)
# print(as.vector(w))
sqrt(t(w) %*% cov_frame %*% w)
}
dt_points <-extractWeights(optm_maxSharp_ewma) |> index() |> as.character()|> embed(2)
dt_points <- dt_points[,2:1]
# Calculate the volatility contribution of each asset
volatility_contribution <- function(cov_matrix, weights) {
#w_matrix <- matrix(weights, nrow = length(weights), ncol = 1)
sd_portfolio <- sqrt(t(w) %*% cov_matrix %*% w)
}
for (i in 1:nrow(dt_points)){
string_period <- paste(dt_points[i,1],dt_points[i,2],sep="/")
frame_returns <- stock_returns[string_period]
cov_frame <- frame_returns |> cov()
w <- extractWeights(optm_maxSharp_ewma)[dt_points[i,1]] |> as.vector()
# print(cov_frame)
# print(as.vector(w))
sd_portfolio <- sqrt(t(w) %*% cov_frame %*% w)
marginal_contribution <- w %*% cov_frame / sd_portfolio[1, 1]
component_contribution <- marginal_contribution * w
components_summed <- rowSums(component_contribution)
component_percentages <- component_contribution / sd_portfolio[1, 1]
percentage_tibble_by_hand <- tibble(symbols, w, as.vector(component_percentages)) %>% rename(asset = symbols, 'portfolio weight' = w, 'risk contribution' =`as.vector(component_percentages)`)
percentage_tibble_by_hand
}
dt_points <-extractWeights(optm_maxSharp_ewma) |> index() |> as.character()|> embed(2)
dt_points <- dt_points[,2:1]
# Calculate the volatility contribution of each asset
volatility_contribution <- function(cov_matrix, weights) {
#w_matrix <- matrix(weights, nrow = length(weights), ncol = 1)
sd_portfolio <- sqrt(t(w) %*% cov_matrix %*% w)
}
for (i in 1:nrow(dt_points)){
string_period <- paste(dt_points[i,1],dt_points[i,2],sep="/")
frame_returns <- stock_returns[string_period]
cov_frame <- frame_returns |> cov()
w <- extractWeights(optm_maxSharp_ewma)[dt_points[i,1]] |> as.vector()
# print(cov_frame)
# print(as.vector(w))
sd_portfolio <- sqrt(t(w) %*% cov_frame %*% w)
marginal_contribution <- w %*% cov_frame / sd_portfolio[1, 1]
component_contribution <- marginal_contribution * w
components_summed <- rowSums(component_contribution)
component_percentages <- component_contribution / sd_portfolio[1, 1]
percentage_tibble_by_hand <- tibble(symbols, w, as.vector(component_percentages))
}
dt_points <-extractWeights(optm_maxSharp_ewma) |> index() |> as.character()|> embed(2)
dt_points <- dt_points[,2:1]
# Calculate the volatility contribution of each asset
volatility_contribution <- function(cov_matrix, weights) {
#w_matrix <- matrix(weights, nrow = length(weights), ncol = 1)
sd_portfolio <- sqrt(t(w) %*% cov_matrix %*% w)
}
for (i in 1:nrow(dt_points)){
string_period <- paste(dt_points[i,1],dt_points[i,2],sep="/")
frame_returns <- stock_returns[string_period]
cov_frame <- frame_returns |> cov()
w <- extractWeights(optm_maxSharp_ewma)[dt_points[i,1]] |> as.vector()
# print(cov_frame)
# print(as.vector(w))
sd_portfolio <- sqrt(t(w) %*% cov_frame %*% w)
marginal_contribution <- w %*% cov_frame / sd_portfolio[1, 1]
component_contribution <- marginal_contribution * w
components_summed <- rowSums(component_contribution)
component_percentages <- component_contribution / sd_portfolio[1, 1]
percentage_tibble_by_hand <- tibble(colnames(cov_frame), w, as.vector(component_percentages))
}
dt_points <-extractWeights(optm_maxSharp_ewma) |> index() |> as.character()|> embed(2)
dt_points <- dt_points[,2:1]
# Calculate the volatility contribution of each asset
volatility_contribution <- function(cov_matrix, weights) {
#w_matrix <- matrix(weights, nrow = length(weights), ncol = 1)
sd_portfolio <- sqrt(t(w) %*% cov_matrix %*% w)
}
for (i in 1:nrow(dt_points)){
string_period <- paste(dt_points[i,1],dt_points[i,2],sep="/")
frame_returns <- stock_returns[string_period]
cov_frame <- frame_returns |> cov()
w <- extractWeights(optm_maxSharp_ewma)[dt_points[i,1]] |> as.vector()
# print(cov_frame)
# print(as.vector(w))
sd_portfolio <- sqrt(t(w) %*% cov_frame %*% w)
marginal_contribution <- w %*% cov_frame / sd_portfolio[1, 1]
component_contribution <- marginal_contribution * w
components_summed <- rowSums(component_contribution)
component_percentages <- component_contribution / sd_portfolio[1, 1]
percentage_tibble_by_hand <- tibble(colnames(cov_frame), w, as.vector(component_percentages))
print(percentage_tibble_by_hand)
}
setwd("~/Documents/Faculdade/EAD0759 - Tecnicas de Aprendizado de MÃ¡quina Aplicadas a Negocios/Lab 3")
install.packages("arules")
install.packages("arulesViz")
install.packages("readxl")
install.packages("knitr")
#instalar e carregar o pacote arules
library(arules)
library(arulesViz)
library(tidyverse)
library(readxl)
library(knitr)
library(ggplot2)
library(lubridate)
library(dplyr)
retail <- read_excel('c:/dados/Online_Retail.xlsx')
retail <- read_excel('Online_Retail.xlsx')
retail <- read_excel('Online Retail.xlsx')
retail <- retail[complete.cases(retail), ]
retail |>
mutate(
Description = as.factor(Description),
Country = as.factor(Country),
Date = as.Date(InvoiceDate),
TransTime = format(InvoiceDate,"%H:%M:%S"),
InvoiceNo = as.numeric(as.character(InvoiceNo)))
retail <- read_excel('Online Retail.xlsx')
retail <- retail[complete.cases(retail), ]
retail
retail <- read_excel('Online Retail.xlsx')
retail <- retail[complete.cases(retail), ]
retail <- retail |>
mutate(
Description = as.factor(Description),
Country = as.factor(Country),
Date = as.Date(InvoiceDate),
TransTime = format(InvoiceDate,"%H:%M:%S"),
InvoiceNo = as.numeric(as.character(InvoiceNo))
retail |> glimpse()
retail <- read_excel('Online Retail.xlsx')
retail <- retail[complete.cases(retail), ]
retail <- retail |>
mutate(
Description = as.factor(Description),
Country = as.factor(Country),
Date = as.Date(InvoiceDate),
TransTime = format(InvoiceDate,"%H:%M:%S"),
InvoiceNo = as.numeric(as.character(InvoiceNo)))
retail |> glimpse()
library(plyr)
#instalar e carregar o pacote arules
library(arules)
library(arulesViz)
library(tidyverse)
library(readxl)
library(knitr)
library(ggplot2)
library(lubridate)
library(plyr)
library(dplyr)
view(retail)
transactionData <- ddply(retail,c("InvoiceNo","Date"),function(df1)paste(df1$Description, collapse = ","))
transactionData$InvoiceNo <- NULL
transactionData$Date <- NULL
colnames(transactionData) <- c("items")
View(transactionData)
write.csv(transactionData, quote = FALSE,
row.names = FALSE)
transactionData |> write.csv("market_basket_transactions.csv", quote = FALSE,row.names = FALSE)
tr <- read.transactions('C:/Dados/market_basket_transactions.csv', format = 'basket',sep=',')
tr <- read.transactions('market_basket_transactions.csv', format = 'basket',sep=',')
tr
options(warn=-1)
tr <- read.transactions('market_basket_transactions.csv', format = 'basket',sep=',')
tr
#| warning: false
tr <- read.transactions('market_basket_transactions.csv', format = 'basket',sep=',')
tr
summary(tr)
if (!require("RColorBrewer")) {
# install color package of R
install.packages("RColorBrewer")
#include library RColorBrewer
library(RColorBrewer)
}
itemFrequencyPlot(tr,topN=20,type="absolute",col=brewer.pal(8,'Pastel2'),
main="Frequencia Absoluta de Itens")
itemFrequencyPlot(tr,topN=20,type="relative",col=brewer.pal(8,'Pastel2'),main="Frequenci
a Relativa de Itens")
association.rules <- apriori(tr, parameter = list(supp=0.001, conf=0.8,maxlen=10))
summary(association.rules)
inspect(association.rules[1:10])
shorter.association.rules <- apriori(tr, parameter = list(supp=0.001,
conf=0.8,maxlen=3))
inspect(shorter.association.rules[1:10])
shorter.association.rules <- apriori(tr, parameter = list(supp=0.001,
conf=0.8,maxlen=3))
inspect(shorter.association.rules[1:10])
metal.association.rules <- apriori(tr, parameter = list(supp=0.001, conf=0.8),appearance
= list(default="lhs",rhs="METAL"))
inspect(head(metal.association.rules))
metal.association.rules <- apriori(tr, parameter = list(supp=0.001, conf=0.8),appearance
= list(lhs="METAL",default="rhs"))
subRules<-association.rules[quality(association.rules)$confidence>0.4]
plot(subRules)
plot(subRules,method="two-key plot")
plotly_arules(subRules)
plot(subRules)
top10subRules <- head(subRules, n = 10, by = "confidence")
plot(top10subRules, method = "graph", engine = "htmlwidget")
subRules2<-head(subRules, n=20, by="lift")
plot(subRules2, method="paracoord")
top10subRules <- head(subRules, n = 10, by = "confidence")
plot(top10subRules, method = "graph")
retail
transactionData
transactionData
retail |> shape
retail |> shape()
retail |> dim()
retail |> dim()
#| echo: true
transactionData |> head()
transactionData |> tail()
transactionData |> view()
#| echo: true
View(transactionData)
#| echo: true
transactionData |> dim()
summary(tr)
?itemFrequencyPlot
if (!require("RColorBrewer")) {
# install color package of R
install.packages("RColorBrewer")
#include library RColorBrewer
library(RColorBrewer)
}
itemFrequencyPlot(tr,topN=30,type="absolute",col=brewer.pal(8,'Pastel2'),
main="Frequencia Absoluta de Itens")
if (!require("RColorBrewer")) {
# install color package of R
install.packages("RColorBrewer")
#include library RColorBrewer
library(RColorBrewer)
}
itemFrequencyPlot(tr,topN=15,type="absolute",col=brewer.pal(8,'Pastel2'),
main="Frequencia Absoluta de Itens")
itemFrequencyPlot(tr,topN=15,type="relative",col=brewer.pal(8,'Pastel2'),main="Frequenci
a Relativa de Itens")
summary(tr)
itemFrequencyPlot(tr,topN=15,type="relative",col=brewer.pal(8,'Pastel2'),main="Frequenci
a Relativa de Itens",lift=True)
itemFrequencyPlot(tr,topN=15,type="relative",col=brewer.pal(8,'Pastel2'),main="Frequenci
a Relativa de Itens",lift=T)
itemFrequencyPlot(tr,topN=-15,type="relative",col=brewer.pal(8,'Pastel2'),main="Frequenci
a Relativa de Itens")
itemFrequencyPlot(tr,topN=-100,type="relative",col=brewer.pal(8,'Pastel2'),main="Frequenci
a Relativa de Itens")
itemFrequencyPlot(tr,topN=-100,type="absolute",col=brewer.pal(8,'Pastel2'),main="Frequenci
a Relativa de Itens")
itemFrequency(tr)
help("itemFrequency")
retail$Date |> max()
retail$Date |> min()
print("Data mÃ­nima: " )
print(retail$Date |> min())
print("Data mÃ¡xima: ")
print(retail$Date |> max())
retail |> dplyr::group_by(Date)|> count()
retail |>
dplyr::group_by(Date)|>
summarise(count(Date))
retail |>
dplyr::count(Date)
association.rules <- apriori(tr, parameter = list(supp=0.1, conf=0.8,maxlen=10))
summary(association.rules)
association.rules <- apriori(tr, parameter = list(supp=0.01, conf=0.8,maxlen=10))
summary(association.rules)
association.rules <- apriori(tr, parameter = list(supp=0.001, conf=0.8,maxlen=10))
summary(association.rules)
association.rules <- apriori(tr, parameter = list(supp=0.05, conf=0.8,maxlen=10))
summary(association.rules)
summary(association.rules)
association.rules <- apriori(tr, parameter = list(supp=0.001, conf=0.8,maxlen=10))
summary(association.rules)
0.001 * 2
association.rules <- apriori(tr, parameter = list(supp=0.002, conf=0.8,maxlen=10))
summary(association.rules)
inspect(association.rules[1:10])
inspect(association.rules[1:10])
summary(apriori(tr, parameter = list(supp=0.001, conf=0.8,maxlen=10)))
shorter.association.rules <- apriori(tr, parameter = list(supp=0.001,
conf=0.95,maxlen=5))
inspect(shorter.association.rules[1:10])
subset.rules <- which(colSums(is.subset(association.rules, association.rules)) > 1)
# ObtÃ©m um subconjunto de regras em um vetor
length(subset.rules) #> 3913
subset.association.rules. <- association.rules[-subset.rules]
subset.rules <- which(colSums(is.subset(association.rules, association.rules)) > 1)
# ObtÃ©m um subconjunto de regras em um vetor
length(subset.rules) #> 3913
subset.association.rules. <- association.rules[-subset.rules]
length(subset.association.rules.)
suggar.association.rules <- apriori(tr, parameter = list(supp=0.001, conf=0.95),appearance
= list(default="lhs",rhs="SUGGAR"))
suggar.association.rules <- apriori(tr, parameter = list(supp=0.001, conf=0.95),appearance
= list(default="lhs",rhs="SUGAR"))
inspect(head(suggar.association.rules))
sugar.association.rules <- apriori(tr, parameter = list(supp=0.001, conf=0.95),appearance
= list(default="lhs",rhs="SUGAR"))
inspect(head(sugar.association.rules))
subset.rules <- which(colSums(is.subset(shorter.association.rules, shorter.association.rules)) > 1)
# ObtÃ©m um subconjunto de regras em um vetor
length(shorter.association.rules)
subset.association.rules. <- association.rules[-shorter.association.rules]
subset.rules <- which(colSums(is.subset(shorter.association.rules, shorter.association.rules)) > 1)
# ObtÃ©m um subconjunto de regras em um vetor
length(shorter.association.rules)
subset.association.rules. <- shorter.association.rules[-subset.rules]
length(subset.association.rules.)
subRules<-subset.association.rules.[quality(subset.association.rules.)$confidence>0.4]
plot(subRules)
plot(subRules,method="two-key plot")
top10subRules <- head(subRules, n = 10, by = "confidence")
plot(top10subRules, method = "graph")
plot(top10subRules, method = "graph")
plot(subRules, method = "matrix")
plot(top10subRules , method = "matrix")
top10subRules
plot(top10subRules , method = "matrix")
plot(top10subRules , method = "matrix", by = "confidence")
plot(top10subRules , method = "matrix")
plot(subRules,method="two-key plot",jitter=0)
top10subRules <- head(subRules, n = 30, by = "confidence")
plot(top10subRules, method = "graph")
top10subRules <- head(subRules, n = 15, by = "confidence")
plot(top10subRules, method = "graph")
top15subRules <- head(subRules, n = 15, by = "confidence")
plot(top15subRules, method = "graph")
subRules<-association.rules[quality(association.rules)$confidence>0.4]
plot(subRules)
plot(subRules,method="two-key plot")
subRules2<-head(subRules, n=20, by="lift")
plot(subRules2, method="paracoord")
plot( head(subRules, n = 25, by = "confidence"), method = "graph")
networkPlot( head(subRules, n = 10, by = "confidence"))
arulesViz::rules2matrix(subRules)
inspect(head(subset(rules, size(rules) == 2), 10))
inspect(head(subset(shorter.association.rule, size(shorter.association.rule) == 2), 10))
shorter.association.rule
shorter.association.rules
inspect(head(subset(shorter.association.rules, size(shorter.association.rules) == 2), 10))
inspect(head(subset(shorter.association.rules, size(shorter.association.rules) == 4), 10))
inspect(head(subset(shorter.association.rules, size(shorter.association.rules) == 3), 10))
inspect(head(subset(subset.rules, size(subset.rules) == 3), 10))
subset.rules <- which(colSums(is.subset(shorter.association.rules, shorter.association.rules)) > 1)
# ObtÃ©m um subconjunto de regras em um vetor
length(shorter.association.rules)
subset.association.rules. <- shorter.association.rules[-subset.rules]
length(subset.association.rules.)
inspect(head(subset(subset.rules, size(subset.rules) ==2), 10))
subset.rules <- which(colSums(is.subset(shorter.association.rules, shorter.association.rules)) > 1)
# ObtÃ©m um subconjunto de regras em um vetor
length(shorter.association.rules)
subset.association.rules.sem.redundantes<- shorter.association.rules[-subset.rules]
length(subset.association.rules.sem.redundantes)
inspect(head(subset(subset.association.rules.sem.redundantes, size(subset.association.rules.sem.redundantes) ==2), 10))
inspect(head(subset(subset.association.rules.sem.redundantes, size(subset.association.rules.sem.redundantes) ==3), 10))
inspect(head(subset(subset.association.rules.sem.redundantes, size(subset.association.rules.sem.redundantes) ==3), 10,by='confidence'))
inspect(head(metal.association.rules))
rabbit.association.rules <- apriori(tr, parameter = list(supp=0.001, conf=0.95),appearance
= list(default="lhs",rhs="RABBIT"))
rabbit.association.rules <- apriori(tr, parameter = list(supp=0.001, conf=0.95),appearance
= list(default="lhs",rhs="RABBIT"))
rabbit.association.rules <- apriori(tr, parameter = list(supp=0.001, conf=0.95),appearance
= list(default="lhs",rhs="WOBBLY RABBIT"))
inspect(head(rabbit.association.rules))
inspect(head(rabbit.association.rules))
inspect(head(rabbit.association.rules))
inspect(head(apriori(tr, parameter = list(supp=0.001, conf=0.95),appearance
= list(default="lhs",rhs="FRENCH"))))
inspect(head(apriori(tr, parameter = list(supp=0.001, conf=0.95),appearance
= list(default="rhs",rhs="FRENCH"))))
inspect(head(apriori(tr, parameter = list(supp=0.001, conf=0.95),appearance
= list(default="rhs",rhs="FRENCH BLUE METAL DOOR SIGN 6"))))
inspect(head(apriori(tr, parameter = list(supp=0.001, conf=0.95),appearance
= list(default="rhs",rhs="COFFEE"))))
inspect(head(apriori(tr, parameter = list(supp=0.001, conf=0.95),appearance
= list(default="rhs",rhs="COFFEE"))))
coffe.association.rules <- apriori(tr, parameter = list(supp=0.001, conf=0.8),appearance
= list(lhs="COFFEE",default="rhs"))
inspect(head(coffe.association.rules))
coffe.association.rules <- apriori(tr, parameter = list(supp=0.001, conf=0.8),appearance
= list(lhs="COFFEE",default="lhs"))
coffe.association.rules <- apriori(tr, parameter = list(supp=0.001, conf=0.8),appearance
= list(lhs="COFFEE",default="lhs"))
inspect(head(coffe.association.rules))
inspect(head(metal.association.rules))
inspect(head(sugar.association.rules))
coffee.association.rules <- apriori(tr, parameter = list(supp=0.001, conf=0.95),appearance
= list(default="lhs",rhs="COFFEE"))
inspect(head(coffee.association.rules))
heart.rhs <- subset(subset.association.rules.sem.redundantes, subset = rhs %in% 'WHITE HANGING HEART T-LIGHT HOLDER')
inspect(heart.rhs)
plot(sort(rules, by='lift', decreasing=TRUE)[1:11], method='graph')
plot(sort(subset.association.rules.sem.redundantes, by='lift', decreasing=TRUE)[1:11], method='graph')
plot(sort(association.rules, by='lift', decreasing=TRUE)[1:11], method='graph')
subRules2<-head(subRules, n=20, by="lift")
plot(subRules2, method="paracoord")
